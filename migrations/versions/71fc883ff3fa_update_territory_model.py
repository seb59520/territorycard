"""update_territory_model

Revision ID: 71fc883ff3fa
Revises: 2ce523d19f8e
Create Date: 2024-12-08 12:28:58.020758

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '71fc883ff3fa'
down_revision = '2ce523d19f8e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Créer une table temporaire pour stocker les données existantes
    op.execute("""
        CREATE TABLE territory_temp AS 
        SELECT id, uuid, name, city, polygon_data, building_stats, user_id, created_at, last_updated 
        FROM territory
    """)
    
    # Supprimer la table existante
    op.drop_table('territory')
    
    # Créer la nouvelle table avec la nouvelle structure
    op.create_table('territory',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('number', sa.String(length=20), nullable=True),
        sa.Column('type', sa.String(length=50), nullable=True),
        sa.Column('city', sa.String(length=100), nullable=True),
        sa.Column('coordinates', sa.JSON(), nullable=False),
        sa.Column('building_count', sa.Integer(), nullable=True),
        sa.Column('apartment_count', sa.Integer(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('last_updated', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('uuid')
    )
    
    # Copier les données de la table temporaire vers la nouvelle table
    op.execute("""
        INSERT INTO territory (id, uuid, name, city, coordinates, user_id, created_at, last_updated)
        SELECT id, uuid, name, city, polygon_data, user_id, created_at, last_updated
        FROM territory_temp
    """)
    
    # Supprimer la table temporaire
    op.execute("DROP TABLE territory_temp")
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Créer une table temporaire pour stocker les données existantes
    op.execute("""
        CREATE TABLE territory_temp AS 
        SELECT id, uuid, name, city, coordinates, building_count, apartment_count, user_id, created_at, last_updated 
        FROM territory
    """)
    
    # Supprimer la table existante
    op.drop_table('territory')
    
    # Créer l'ancienne table
    op.create_table('territory',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('city', sa.String(length=100), nullable=True),
        sa.Column('polygon_data', sa.JSON(), nullable=False),
        sa.Column('building_stats', sa.JSON(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('last_updated', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('uuid')
    )
    
    # Copier les données de la table temporaire vers l'ancienne table
    op.execute("""
        INSERT INTO territory (id, uuid, name, city, polygon_data, user_id, created_at, last_updated)
        SELECT id, uuid, name, city, coordinates, user_id, created_at, last_updated
        FROM territory_temp
    """)
    
    # Supprimer la table temporaire
    op.execute("DROP TABLE territory_temp")
    
    # ### end Alembic commands ###
